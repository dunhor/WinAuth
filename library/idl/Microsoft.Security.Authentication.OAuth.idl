
import "Windows.Foundation.idl";

namespace Microsoft.Security.Authentication.OAuth
{
    runtimeclass AuthManager
    {
        static Windows.Foundation.IAsyncOperation<AuthRequestResult> InitiateAuthRequestAsync(
            Windows.Foundation.Uri authEndpoint,
            AuthRequestParams params);
        static Windows.Foundation.IAsyncOperation<AuthRequestResult> InitiateAuthRequestAsync(
            Windows.Foundation.Uri authEndpoint,
            AuthRequestParams params,
            String clientSecret);

        // Called by the application when the user agent completes an auth request via a redirect Uri. Return value is
        // true if an appropriate request could be found and was completed. Otherwise returns false indicating that the
        // response went unhandled.
        static Boolean CompleteAuthRequest(Windows.Foundation.Uri responseUri);
    }

    // Correlates to the 'code_challenge_method' as described by section 4.3 of RFC 7636: Proof Key for Code Exchange by
    // OAuth Public Clients (https://www.rfc-editor.org/rfc/rfc7636.html#section-4.3)
    enum CodeChallengeMethodKind
    {
        // Suppresses the use of a code verifier. An error will be thrown if a code challenge string is set when this
        // option is used
        None = 0,
        // Challenge method of "S256" (i.e. SHA256). This is the default unless explicitly set
        S256 = 1,
        // Challenge method of "plain" (i.e. send as plain text)
        Plain = 2,
    };

    runtimeclass AuthRequestParams
    {
        // Construct with required parameters, per RFC 6749 4.1.1
        AuthRequestParams(String clientId, String responseType);

        // Redirect uri is optional, but frequently specified
        AuthRequestParams(String clientId, String responseType, Windows.Foundation.Uri redirectUri);

        // Used for the 'response_type' param as specified by RFC 6749 3.1.1
        // TODO: Should we just assume this to be 'code' and use different types to diferrentiate?
        String ResponseType { get; set; };

        // Used for the 'client_id' param as specified by RFC 6749 2.3.1
        String ClientId { get; set; };
        // TODO: ClientSecret?

        // Used for the 'redirect_uri' param as specified by RFC 6749 3.1.2
        Windows.Foundation.Uri RedirectUri { get; set; };

        // Used for the 'scope' param as specified by RFC 6749 3.3
        String Scope { get; set; }; // TODO: IVector?

        // TODO
        String State { get; set; };

        // Used for the 'code_challenge' and 'code_challenge_method' params as specified by RFC 7636
        String CodeVerifier { get; set; };
        CodeChallengeMethodKind CodeChallengeMethod { get; set; };

        // Additional parameters passed along with the request
        Windows.Foundation.Collections.IMap<String, String> AdditionalParams;
    }

    runtimeclass AuthRequestResult
    {
        AuthResponse Response { get; };
        AuthFailure Failure { get; };
    }

    runtimeclass AuthFailure
    {
        Windows.Foundation.Uri ResponseUri { get; };

        // TODO: More info from the response
    }

    runtimeclass AuthResponse
    {
        // TODO: Might this need some form of activated event args?
        Windows.Foundation.Uri ResponseUri { get; };

        String TokenType { get; };
        String Code { get; };
        String AccessToken { get; };
        String State { get; };
        String ExpiresIn { get; }; // TODO: DateTime?
        // String IdToken { get; };
        String Scope { get; };
        Windows.Foundation.Collections.IMap<String, String> AdditionalParams { get; };
    }
}
